#include "flatbuffers/flatbuffers.h"
#include "monster_generated.h"
#include <iostream> // C++ header file for printing
#include <fstream> // C++ header file for file access

#if 0
void test_1(flatbuffers::FlatBufferBuilder flatbuffer){
// Autogenerated class from table Monster.
MyGame::Sample::Monster monsterobj;
// Deserialize from buffer into object.
UnPackTo(&monsterobj, flatbuffer);
// Update object directly like a C++ class instance.
cout << monsterobj->name;  // This is now a std::string!
monsterobj->name = "Bob";  // Change the name.
// Serialize into new flatbuffer.
flatbuffers::FlatBufferBuilder fbb;
flatbuffers::Pack(fbb, &monsterobj);
    
}
#endif

int main (){
    std::cout<<"I am the main"<<std::endl;
    
    //READING THE BINARY DATA
	std::ifstream infile;
	infile.open("monsterdata_test.mon", std::ios::binary | std::ios::in);
	infile.seekg(0, std::ios::end);
	int length = infile.tellg();
	infile.seekg(0, std::ios::beg);
	char *data = new char[length];
	infile.read(data, length);
	infile.close();
    
    // Convert the binary to strcure
	auto monster = MyGame::Sample::GetMonster(data);
    std::cout << "hp : " << monster->hp() << std::endl;            // `80`
    std::cout << "mana : " << monster->mana() << std::endl;        // default value of `150`
    std::cout << "name : " << monster->name()->c_str() << std::endl;        // "MyMonster"
    
    //flatbuffers::FlatBufferBuilder fbb;
    //flatbuffers::Pack(fbb, &monsterobj);
    //test_1(fbb);
}

